* Summary

How do you create an object-oriented programming language with just
dictionaries and a simple linking mechanism.

* Exercises

** Looping

** Inheritance

** Memoizing

** Generators

* Setup

#+begin_src sh
brew install lua cmake rtmidi
luarocks install luarepl

#+end_src

#+begin_src lua

#+end_src
* Considerations

- typical action like iterating through a sequence seemed like more initialization work than would generally be expected

- not being able to return from an if seemed odd

- the reduce example seemed useful

- the use of pairs and tables seems worthwhile to illustrate

- tables are dicts (Python) or hashes (Ruby)

- pairs(table) is an iterator wrapping a for loop

* Getting Started

#+begin_src sh
lua -e 'print(math.sin(1))'
#+end_src

#+RESULTS:
: 0.8414709848079

* Documentation

- http://www.lua.org/manual/5.1/manual.html#pdf-for
* Tasks

** Bytecode


#+begin_src sh
luajit -bl ast-example.lua
#+end_src

#+begin_src asm
-- BYTECODE -- ast-example.lua:1-1
0001    RET1     0   2

-- BYTECODE -- ast-example.lua:0-2
0001    TNEW     0   0
0002    TSETS    0   0   0  ; "a"
0003    TGETS    1   0   0  ; "a"
0004    FNEW     2   1      ; ast-example.lua:1
0005    TSETS    2   1   0  ; "a"
0006    GGET     1   2      ; "print"
0007    TGETS    2   0   0  ; "a"
0008    KSTR     3   0      ; "a"
0009    CALL     2   2   2
0010    LEN      3   0
0011    CALL     1   1   3
0012    RET0     0   1

#+end_src



** AST

#+begin_src lua
local a = {} ; a.b = a a.b["c"], d = function(e) return e end, "f" print(a.b("g"), #a) return { a = a}
#+end_src


#+begin_src json
{
  "type": "Chunk",
  "body": [
    {
      "type": "LocalStatement",
      "variables": [
        {
          "type": "Identifier",
          "name": "a"
        }
      ],
      "init": [
        {
          "type": "TableConstructorExpression",
          "fields": []
        }
      ]
    },
    {
      "type": "AssignmentStatement",
      "variables": [
        {
          "type": "MemberExpression",
          "indexer": ".",
          "identifier": {
            "type": "Identifier",
            "name": "b"
          },
          "base": {
            "type": "Identifier",
            "name": "a"
          }
        }
      ],
      "init": [
        {
          "type": "Identifier",
          "name": "a"
        }
      ]
    },
    {
      "type": "AssignmentStatement",
      "variables": [
        {
          "type": "IndexExpression",
          "base": {
            "type": "MemberExpression",
            "indexer": ".",
            "identifier": {
              "type": "Identifier",
              "name": "b"
            },
            "base": {
              "type": "Identifier",
              "name": "a"
            }
          },
          "index": {
            "type": "StringLiteral",
            "value": null,
            "raw": "\"c\""
          }
        },
        {
          "type": "Identifier",
          "name": "d"
        }
      ],
      "init": [
        {
          "type": "FunctionDeclaration",
          "identifier": null,
          "isLocal": false,
          "parameters": [
            {
              "type": "Identifier",
              "name": "e"
            }
          ],
          "body": [
            {
              "type": "ReturnStatement",
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "e"
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "value": null,
          "raw": "\"f\""
        }
      ]
    },
    {
      "type": "CallStatement",
      "expression": {
        "type": "CallExpression",
        "base": {
          "type": "Identifier",
          "name": "print"
        },
        "arguments": [
          {
            "type": "CallExpression",
            "base": {
              "type": "MemberExpression",
              "indexer": ".",
              "identifier": {
                "type": "Identifier",
                "name": "b"
              },
              "base": {
                "type": "Identifier",
                "name": "a"
              }
            },
            "arguments": [
              {
                "type": "StringLiteral",
                "value": null,
                "raw": "\"g\""
              }
            ]
          },
          {
            "type": "UnaryExpression",
            "operator": "#",
            "argument": {
              "type": "Identifier",
              "name": "a"
            }
          }
        ]
      }
    },
    {
      "type": "ReturnStatement",
      "arguments": [
        {
          "type": "TableConstructorExpression",
          "fields": [
            {
              "type": "TableKeyString",
              "key": {
                "type": "Identifier",
                "name": "a"
              },
              "value": {
                "type": "Identifier",
                "name": "a"
              }
            }
          ]
        }
      ]
    }
  ],
  "comments": []
}

#+end_src
