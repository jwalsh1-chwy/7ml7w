* Summary

How do you create an object-oriented programming language with just
dictionaries and a simple linking mechanism.

* Exercises

** Looping

** Inheritance

** Memoizing

** Generators

* Setup

#+begin_src sh
brew install lua cmake rtmidi
luarocks install luarepl

#+end_src

#+begin_src lua

#+end_src
* Considerations

- typical action like iterating through a sequence seemed like more initialization work than would generally be expected

- not being able to return from an if seemed odd

- the reduce example seemed useful

- the use of pairs and tables seems worthwhile to illustrate

- tables are dicts (Python) or hashes (Ruby)

- pairs(table) is an iterator wrapping a for loop

* Getting Started

#+begin_src sh
lua -e 'print(math.sin(1))'
#+end_src

#+RESULTS:
: 0.8414709848079

* Documentation

- http://www.lua.org/manual/5.1/manual.html#pdf-for
* Parsing Lua

#+begin_src lua
local a = {} ; a.b = a a.b["c"], d = function(e) return e end, "f" print(a.b("g"), #a) return { a = a }
#+end_src

This should be parsed as:

- LocalStatement
- AssignmentStatement
- AssignmentStatement
- CallStatement
- ReturnStatement

GOTO (through ::end::) isn't recognized by the parser and isn't included in this example.

** Bytecode


#+begin_src sh
luajit -bl ast-example.lua
#+end_src

#+RESULTS:
|   -- | BYTECODE |   -- | ast-example.lua:1-1 |      |                   |   |
| 0001 | RET1     |    0 |                   2 |      |                   |   |
|   -- | BYTECODE |   -- | ast-example.lua:0-2 |      |                   |   |
| 0001 | TNEW     |    0 |                   0 |      |                   |   |
| 0002 | TSETS    |    0 |                   0 |    0 | ;                 | b |
| 0003 | TGETS    |    1 |                   0 |    0 | ;                 | b |
| 0004 | FNEW     |    2 |                   2 |    ; | ast-example.lua:1 |   |
| 0005 | KSTR     |    3 |                   3 |    ; | f                 |   |
| 0006 | GSET     |    3 |                   4 |    ; | d                 |   |
| 0007 | TSETS    |    2 |                   1 |    1 | ;                 | c |
| 0008 | GGET     |    1 |                   5 |    ; | print             |   |
| 0009 | TGETS    |    2 |                   0 |    0 | ;                 | b |
| 0010 | KSTR     |    3 |                   6 |    ; | g                 |   |
| 0011 | CALL     |    2 |                   2 |    2 |                   |   |
| 0012 | LEN      |    3 |                   0 |      |                   |   |
| 0013 | CALL     |    1 |                   1 |    3 |                   |   |
| 0014 | TDUP     |    1 |                   7 |      |                   |   |
| 0015 | TSETS    |    0 |                   1 |    8 | ;                 | a |
| 0016 | UCLO     |    0 |                  => | 0017 |                   |   |
| 0017 | =>       | RET1 |                   1 |    2 |                   |   |

#+begin_src asm
-- BYTECODE -- ast-example.lua:1-1
0001    RET1     0   2

-- BYTECODE -- ast-example.lua:0-2
0001    TNEW     0   0
0002    TSETS    0   0   0  ; "b"
0003    TGETS    1   0   0  ; "b"
0004    FNEW     2   2      ; ast-example.lua:1
0005    KSTR     3   3      ; "f"
0006    GSET     3   4      ; "d"
0007    TSETS    2   1   1  ; "c"
0008    GGET     1   5      ; "print"
0009    TGETS    2   0   0  ; "b"
0010    KSTR     3   6      ; "g"
0011    CALL     2   2   2
0012    LEN      3   0
0013    CALL     1   1   3
0014    TDUP     1   7
0015    TSETS    0   1   8  ; "a"
0016    UCLO     0 => 0017
0017 => RET1     1   2


#+end_src

#+begin_src sh
npx ./ast.js | jq
#+end_src

** AST

#+begin_src json
{
  "type": "Chunk",
  "body": [
    {
      "type": "LocalStatement",
      "variables": [
        {
          "type": "Identifier",
          "name": "a"
        }
      ],
      "init": [
        {
          "type": "TableConstructorExpression",
          "fields": []
        }
      ]
    },
    {
      "type": "AssignmentStatement",
      "variables": [
        {
          "type": "MemberExpression",
          "indexer": ".",
          "identifier": {
            "type": "Identifier",
            "name": "b"
          },
          "base": {
            "type": "Identifier",
            "name": "a"
          }
        }
      ],
      "init": [
        {
          "type": "Identifier",
          "name": "a"
        }
      ]
    },
    {
      "type": "AssignmentStatement",
      "variables": [
        {
          "type": "IndexExpression",
          "base": {
            "type": "MemberExpression",
            "indexer": ".",
            "identifier": {
              "type": "Identifier",
              "name": "b"
            },
            "base": {
              "type": "Identifier",
              "name": "a"
            }
          },
          "index": {
            "type": "StringLiteral",
            "value": null,
            "raw": "\"c\""
          }
        },
        {
          "type": "Identifier",
          "name": "d"
        }
      ],
      "init": [
        {
          "type": "FunctionDeclaration",
          "identifier": null,
          "isLocal": false,
          "parameters": [
            {
              "type": "Identifier",
              "name": "e"
            }
          ],
          "body": [
            {
              "type": "ReturnStatement",
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "e"
                }
              ]
            }
          ]
        },
        {
          "type": "StringLiteral",
          "value": null,
          "raw": "\"f\""
        }
      ]
    },
    {
      "type": "CallStatement",
      "expression": {
        "type": "CallExpression",
        "base": {
          "type": "Identifier",
          "name": "print"
        },
        "arguments": [
          {
            "type": "CallExpression",
            "base": {
              "type": "MemberExpression",
              "indexer": ".",
              "identifier": {
                "type": "Identifier",
                "name": "b"
              },
              "base": {
                "type": "Identifier",
                "name": "a"
              }
            },
            "arguments": [
              {
                "type": "StringLiteral",
                "value": null,
                "raw": "\"g\""
              }
            ]
          },
          {
            "type": "UnaryExpression",
            "operator": "#",
            "argument": {
              "type": "Identifier",
              "name": "a"
            }
          }
        ]
      }
    },
    {
      "type": "ReturnStatement",
      "arguments": [
        {
          "type": "TableConstructorExpression",
          "fields": [
            {
              "type": "TableKeyString",
              "key": {
                "type": "Identifier",
                "name": "a"
              },
              "value": {
                "type": "Identifier",
                "name": "a"
              }
            }
          ]
        }
      ]
    }
  ],
  "comments": []
}

#+end_src


* Chunk
** LocalStatement
   local
*** Identifier
    a
   =
*** TableConstructorExpression
    {

    }
** AssignmentStatement 1
*** MemberExpression
    a . b
   =
*** Identifier
    a
** AssignmentStatement 2
*** IndexExpression
**** MemberExpression
     a . b
    [
**** StringLiteral
     null "c"
    ]
*** Identifier 1
    d
   =
*** FunctionDeclaration
    function(
**** Identifier
     e
    )
**** ReturnStatement
***** Identifier
      e
*** StringLiteral 1
    null "f"
** CallStatement 3
*** CallExpression
**** Identifier
     print
**** CallExpression
***** MemberExpression
      a . b
***** StringLiteral
      null "g"
**** UnaryExpression 1
     # a

** ReturnStatement 4
*** TableConstructorExpression
    {

**** TableKeyString
     a = a
    }
