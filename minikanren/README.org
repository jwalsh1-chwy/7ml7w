* miniKanren

- https://github.com/swannodette/logic-tutorial
- https://github.com/webyrd/Barliman
- https://github.com/clojure/core.logic/tree/master/src/main/clojure/clojure/core/logic

** Day 1: Unified Theories of Code

** Day 2: Mixing the Logical and Functional

** Day 3: Writing Stories with Logic

* core.logic

- https://clojuredocs.org/clojure.core.logic
- https://github.com/clojure/core.logic/blob/master/src/main/clojure/clojure/core/logic.clj

** Suffixes

| o | relation        |
| a | soft goal       |
| g | psuedo relation |
| u | committed       |
| e |                 |
| c | constraint      |

* The Reasoned Schemer

- Run Geiser with Chez Scheme on the following:



#+begin_src sh
brew install chezscheme
cd ~/sandbox
git clone git@github.com:TheReasonedSchemer2ndEd/CodeFromTheReasonedSchemer2ndEd.git
cd CodeFromTheReasonedSchemer2ndEd
echo '(load "trs2-impl.scm")' > repl.scm
echo "(run* q (== 'pasta q))" >> repl.scm
echo '(load "trs2-arith.scm")' >> repl.scm
echo '(run* q (*o (build-num 3) (build-num 4) q))' >> repl.scm
#+end_src

#+RESULTS:
